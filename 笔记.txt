### 1.Netty介绍
Netty是由JBOSS提供的一个java开源框架。
Netty提供异步的、事件驱动的网络应用程序框架和工具，用以快速开发高性能、高可靠性的网络服务器和客户端程序。
也就是说，Netty 是一个基于NIO的客户、服务器端编程框架。
使用Netty 可以确保你快速和简单的开发出一个网络应用，例如实现了某种协议的客户、服务端应用。
Netty相当于简化和流线化了网络应用的编程开发过程，例如：基于TCP和UDP的socket服务开发。

java.io
java.nio

java.io
java.nio
java.io中最为核心的一个概念是流(stream)，面向流的编程。Java中，一个流要么是输入流，要么是输出流，不可能同时既是输入流又是输出流。
java.nio中拥有3个核心概念:
    selector,channel与Buffer。在java.nio中，我们是面向块(block)或是缓冲区(buffer)编程的。
    Buffer本身就是一块内存，底层实现上，它实际上是个数组。数据的读、写都是通过Buffer来实现的。

除了数组之外，Buffer还提供了对于数据的结构化访问方式，并且可以追踪到系统的读写过程。
Java中的8种原张数据类型都有各自对应的Buffer类型，如IntBuffer，LongBuffer，ByteBuffer及CharBuffer等等。
Channel指的是可以向其写入数据或是从中读取数据的对象，它类似于java.io中的Stream。
所有数据的读写都是通过Buffer来进行的，永远不会出现直接向channel写入数据的情况，或是直接从channel读取数据的情况。
与Stream不同的是，channel是双向的，channel打开后则可以进行读取或是写入，而一个流只可能是inputStream或是outputStream。
由于channel是双向的，因此它能更好地反映出底层操作系统的真实情况;在linux系统中，底层操作系统的通道就是双向的。

关于NI0 Buffer中的3个重要状态属性的含义:position，limit与capacity。
    0<=mark<= position<= limit <= capacity

通过NIO读取文件涉及到3个步骤:
    1.从FileInputStream获取到fileChannel对象:
    2.创建Buffer。
    3.将数据从channel读取到Buffer中。

绝对方法与相对方法的含义:
    1.相对方法:limit值与position值会在操作时被考虑到。
    2.绝对方法:完全忽略掉limit值与position值。

### 1.NIO：特别适合 请求量特别大，而且大部分都是比较小的请求
Channel 是 Java NIO 中用于进行 I/O 操作的连接。它类似于传统 I/O 中的流，但 Channel 是双向的，既可以进行读操作，也可以进行写操作，
而传统的流通常是单向的（输入流或输出流）。常见的 Channel 实现类有 FileChannel、SocketChannel、ServerSocketChannel 等。
数据传输：Channel 负责与数据源（如文件、网络套接字等）进行数据的传输。数据可以从 Channel 读取到 ByteBuffer 中，也可以从 ByteBuffer 写入到 Channel 中。
非阻塞模式：Channel 可以工作在阻塞或非阻塞模式下。在非阻塞模式下，Channel 的 I/O 操作不会阻塞线程，线程可以继续执行其他任务。

Selector 是 Java NIO 中的多路复用器，它允许一个线程管理多个 Channel 的 I/O 操作。通过 Selector，
可以在一个线程中同时监听多个 Channel 的读写事件，从而提高系统的并发处理能力。
注册Channel：
    Channel需要注册到Selector上，并指定要监听的事件类型（如读、写、连接、接受连接等）。注册后，Selector会监控这些Channel的状态变化。
选择就绪的Channel：
    Selector的select()方法是一个阻塞方法，它会一直阻塞直到至少有一个注册的Channel准备好进行I/O操作。
    当有Channel准备好时，select() 方法会返回准备好的Channel的数量。
事件循环：在调用select()方法后，可以通过selector.selectedKeys()方法获取已经准备好的Channel所对应的SelectionKey集合，
        然后遍历这个集合，处理每个准备好的Channel。

SelectionKey 是 Channel 和 Selector 之间的关联，它包含了 Channel 的状态信息和注册的事件。
每个注册到 Selector 上的 Channel 都会关联一个 SelectionKey。


### 2.传统的Java网络编程
传统的网络编程中，假设服务端监听8899端口，客户端与服务器建立连接后，服务端通过监听端口来接收客户端的连接请求并处理后续的通信数据。
每次客户端端与服务端建立连接时，客户端都会分配一个可用的端口号（源端口）来与服务端进行通信。

每次监听到一个连接，都需要一个线程来进行处理，在简单的业务场景下是合适的。如果面对是上百万的客户端连接，服务端的这种网络编程显然是不能满足的。
每个客户端连接都需要一个线程来处理，首先操作系统允许创建的线程也是有限的，
第二线程越多CPU进行切换调度的成本就越大，进行影响整体系统的执行效率。

// 服务端代码
ServerSocket serverSocketserverSocket.bind(8899);
while(true){
    Socket socket=serverSocket.accept();//阻塞方法
    new Thread(socket){
    run(){
            socket.getInputStream();
        }
    };
}

// 客户端代码
Socket socket=new Socket("localhost"，8899);
socket.connect()i

源端口属于5元组的一部分，用来确保即使多个客户端连接到同一个服务器端口，每个连接也能被正确区分和处理。
五元组包括以下五个部分：
传输层协议（Protocol）：通常是 TCP 或 UDP，用于区分不同的传输层协议。
源IP地址（Source IP）：客户端的 IP 地址，如 192.168.1.100。
源端口（Source Port）：客户端随机选择的临时端口（Ephemeral Port），如 54321。
目的 IP 地址（Destination IP）：服务器的 IP 地址，如 10.0.0.1。
目的端口（Destination Port）：服务器的监听端口，如 80（HTTP）或 443（HTTPS）

### 3.selector
1. selector上可以注册多个channel
2. 每个channel注册到selector上时，可以指定关注的事件，比如accept，read，write，connect
3. 当发生特定的事件时，意味着selector中注册的channel可以进行IO时，获取到这些channel和其对应发生的事件，进而根据事件类型做处理。比如监听到连接，可读可写等。

### 4.编码知识
0. 文件在磁盘存储时都会有一个编码
1. ASCII码：7bit表示一个字符，一共128个字符
2. ISO-8859-1：8bit，1字节表示一个字符，一共256个字符
3. gb2312：2个字节表示一个字符（英文字符也是2个字节表示）
4. gbk，gb18030：2个字节表示一个字符
5. unicode编码：2个字节表示一个字符
6. utf-8：unicode编码是一种编码方式，utf-8可以认为是文件具体的存储格式，是unicode的一种实现方式
          变长的，英文字符1个字节，汉字3个字节表示
7. utf-16：定长的，2个字节表示一个字符
    utf16-LE(little endian) utf16-BE(big endian)
    windows文件的开头会有两个字节，也叫做Zero Width No-Break Space，如果是0xFEFF(大端BE)，0xFFFE(小端LE)

8. BOM(Byte Order Mark)：字节序，文件头带0xFEFF(大端BE)或0xFFFE(小端LE)，就有BOM头

### 5.流的方向
InputStream 都是从外部输入到程序中。
OutputStream从程序输出到外部。可以这样理解吗

read 方法就是从外部数据源读取数据到程序中
write 方法就是把程序中的数据写入到外部目标中
